http://eloquentjavascript.net/Eloquent_JavaScript.pdf


SANDBOX
http://eloquentjavascript.net/code/#2

- Undefined vs null

Automatic Type Conversion
    console.log(8 * null)
    // ▹ 0
    console.log("5" - 1)
    // ▹ 4
    console.log("5" + 1)
    // ▹ 51
    console.log("five" * 2)
    // ▹ NaN
    console.log(false == 0)
    // ▹ true
When an operator is applied to the “wrong” type of value, JavaScript will quietly convert that value to the type it wants, using a set of rules that often aren’t what you want or expect. 

console.log(null == undefined);
// ▹ true
console.log(null == 0);
// ▹ false

The rules for converting strings and numbers to Boolean values state that 0, NaN, and the empty string ("") count as false, while all the other values count as true. Because of this, expressions like 0 == false and "" == false are also true. For cases like this, where you do not want any automatic type conversions to happen, there are two extra operators: === and !==. The first tests whether a value is precisely equal to the other, and the second tests whether it is not precisely equal. So "" === false is false as expected.

The || operator, for example, will return the value to its left when that can be converted to true and will return the value on its right otherwise. This conversion works as you’d expect for Boolean values and should do something analogous for values of other types.
console.log(null || "user")
// ▹ user
console.log("Karl" || "user")
// ▹ Karl


Dialog Functions
- You can ask the user an OK/Cancel question using confirm

- prompt function can be used to ask an “open” question. The first argument is the question, the second one is the text that the user starts with. A line of text can be typed into the dialog window, and the function will return this text as a string.


FUNCTIONS
JavaScript is extremely broad-minded about the number of arguments you pass to a function. If you pass too many, the extra ones are ignored. If you pass too few, the missing parameters simply get assigned the value undefined.

function multiplier(factor) {
  return function(number) {
    return number * factor;
  };
}

var twice = multiplier(2);
console.log(twice(5));
// ▹ 10

Thinking about programs like this takes some practice. A good mental model is to think of the function keyword as “freezing” the code in its body and wrapping it into a package (the function value). So when you read return function(...) {...}, think of it as returning a handle to a piece of computation, frozen for later use.

In the example, multiplier returns a frozen chunk of code that gets stored in the twice variable. The last line then calls the value in this variable, causing the frozen code (return number * factor;) to be activated. It still has access to the factor variable from the multiplier call that created it, and in addition it gets access to the argument passed when unfreezing it, 5, through its number parameter.

// Create a function value f
var f = function(a) {
  console.log(a + 2);
};

// Declare g to be a function
function g(a, b) {
  return a * b * 3.5;
}

ARRAYS
var mack = [];
mack.push("Mack");
mack.push("the", "Knife");
console.log(mack);
// ▹ ["Mack", "the", "Knife"]
console.log(mack.join(" "));
// ▹ Mack the Knife
console.log(mack.pop());
// ▹ Knife
console.log(mack);
// ▹ ["Mack", "the"]

DELETE function

var anObject = {left: 1, right: 2};
console.log(anObject.left);
// ▹ 1
delete anObject.left;
console.log(anObject.left);
// ▹ undefined
console.log("left" in anObject);
// ▹ false
console.log("right" in anObject);
// ▹ true

forEach, for... in

var journal = [
  {events: ["work", "touched tree", "pizza",
            "running", "television"],
   squirrel: false},
  {events: ["work", "ice cream", "cauliflower",
            "lasagna", "touched tree", "brushed teeth"],
   squirrel: false},
  {events: ["weekend", "cycling", "break",
            "peanuts", "beer"],
   squirrel: true},
  /* and so on... */
];
journal.forEach( element => { 
  //console.log(element)
  for (let e in element) {
    console.log(e + ": " +element[e]);
  }
});

https://codeburst.io/javascript-the-difference-between-foreach-and-for-in-992db038e4c2

MUTABILITY
When we have two numbers, 120 and 120, we can consider them precisely the same number, whether or not they refer to the same physical bits. But with objects, there is a difference between having two references to the same object and having two different objects that contain the same properties. Consider the following code:var object1 = {value: 10};var object2 = object1;var object3 = {value: 10};console.log(object1 == object2);// ▹ trueconsole.log(object1 == object3);// ▹ falseobject1.value = 15;console.log(object2.value);// ▹ 15console.log(object3.value);// ▹ 10


ARRAYS
.push = inserts at the end of the ARRAY 
.unshift = inserts at the beginning of the ARRAY
.pop = removes from the end of the ARRAY
.shift = removes from the beginning of the ARRAY

var array = [1,2,3,4,5];
console.log(array);
console.log(array.push(6));
console.log(array);
console.log(array.pop());
console.log(array);
console.log(array.shift());
console.log(array);
console.log(array.unshift(1));
console.log(array);

[1, 2, 3, 4, 5]
6
[1, 2, 3, 4, 5, 6]
6
[1, 2, 3, 4, 5]
1
[2, 3, 4, 5]
5
[1, 2, 3, 4, 5]

The indexOf method has a sibling called lastIndexof, which starts searching for the given element at the end of the array instead of the front.

console.log([1, 2, 3, 2, 1].indexOf(2));
// ▹ 1
console.log([1, 2, 3, 2, 1].lastIndexOf(2));
// ▹ 3

Another fundamental method is slice, which takes a start index and an end index and returns an array that has only the elements between those indices. The start index is inclusive, the end index exclusive.

console.log([0, 1, 2, 3, 4].slice(2, 4));
// ▹ [2, 3]
console.log([0, 1, 2, 3, 4].slice(2));
// ▹ [2, 3, 4]

ARGUMENTS in Functions
function argumentCounter() {
  console.log("You gave me", arguments.length, "arguments.");
}
argumentCounter("Straw man", "Tautology", "Ad hominem");
// ▹ You gave me 3 arguments.


Most values in JavaScript have properties, the exceptions being null and undefined. Properties are accessed using value.propName or value["propName"]. Objects tend to use names for their properties and store more or less a fixed set of them. Arrays, on the other hand, usually contain varying numbers of conceptually identical values and use numbers (starting from 0) as the names of their properties.There are some named properties in arrays, such as length and a number of methods. Methods are functions that live in properties and (usually) act on the value they are a property of.Objects can also serve as maps, associating values with names. The in operator can be used to find out whether an object contains a property with a given name. The same keyword can also be used in a for loop (for (var name in object)) to loop over an object’s properties.

function range(start, end, step = start < end ? 1 : -1) {
  let array = [];

  if (step > 0) {
    for (let i = start; i <= end; i += step) array.push(i);
  } else {
    for (let i = start; i >= end; i += step) array.push(i);
  }
  return array;
}

function sum(array) {
  let total = 0;
  for (let value of array) {
    total += value;
  }
  return total;
}

console.log(range(1, 10))
// → [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
console.log(range(5, 2, -1));
// → [5, 4, 3, 2]
console.log(sum(range(1, 10)));
// → 55

The bind method, which all functions have, creates a new function that will call the original function but with some of the arguments already fixed.

The following code shows an example of bind in use. It defines a function isInSet that tells us whether a person is in a given set of strings. To call filter in order to collect those person objects whose names are in a specific set, we can either write a function expression that makes a call to isInSet with our set as its first argument or partially apply the isInSet function.

var theSet = ["Carel Haverbeke", "Maria van Brussel",
              "Donald Duck"];
function isInSet(set, person) {
  return set.indexOf(person.name) > -1;
}
console.log(ancestry.filter(function(person) {
  return isInSet(theSet, person);
}));
// ▹ [{name: "Maria van Brussel", ...},
//            {name: "Carel Haverbeke", ...}]
console.log(ancestry.filter(isInSet.bind(null, theSet)));
// ▹ ... same result



Arrays provide a number of useful higher-order methods—forEach to do something with each element in an array, filter to build a new array with some elements filtered out, map to build a new array where each element has been put through a function, and reduce to combine all an array’s elements into a single value.

Functions have an apply method that can be used to call them with an array specifying their arguments. They also have a bind method, which is used to create a partially applied version of the function.


call(), apply(), bind()
https://www.codementor.io/niladrisekhardutta/how-to-call-apply-and-bind-in-javascript-8i1jca6jp
//Use .bind() javascript

var obj = {name:"Niladri"};

var greeting = function(a,b,c){
    return "welcome "+this.name+" to "+a+" "+b+" in "+c;
};

//creates a bound function that has same body and parameters 
var bound = greeting.bind(obj); 


console.dir(bound); ///returns a function

console.log("Output using .bind() below ");

console.log(bound("Newtown","KOLKATA","WB")); //call the bound function

/* the output will be 
Output using .bind() below
welcome Niladri to Newtown KOLKATA in WB */

some()
The some() method checks if any of the elements in an array pass a test (provided as a function).

every()
Analogous to the some method, arrays also have an every method. This one returns true when the given function returns true for every element in the array.
